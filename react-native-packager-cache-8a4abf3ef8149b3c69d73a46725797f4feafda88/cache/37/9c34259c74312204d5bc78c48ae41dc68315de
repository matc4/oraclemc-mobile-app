Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  BackButton: {
    displayName: 'BackButton'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/dev2/Documents/Proyectos/oraclemc-mobile-app/node_modules/react-router-native/BackButton.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BackButton = _wrapComponent('BackButton')((_temp2 = _class = function (_React$Component) {
  _inherits(BackButton, _React$Component);

  function BackButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, BackButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BackButton.__proto__ || Object.getPrototypeOf(BackButton)).call.apply(_ref, [this].concat(args))), _this), _this.handleBack = function () {
      var history = _this.context.router.history;


      if (history.index === 0) {
        return false;
      } else {
        history.goBack();
        return true;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(BackButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _reactNative.BackHandler.addEventListener('hardwareBackPress', this.handleBack);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.handleBack);
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children || null;
    }
  }]);

  return BackButton;
}(_react3.default.Component), _class.contextTypes = {
  router: _propTypes2.default.shape({
    history: _propTypes2.default.shape({
      goBack: _propTypes2.default.func.isRequired,
      index: _propTypes2.default.number.isRequired
    }).isRequired
  }).isRequired
}, _temp2));

exports.default = BackButton;